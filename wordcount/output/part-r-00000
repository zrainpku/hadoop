(itr.hasMoreTokens()){	1
//private	1
1);	1
<String,Integer>	1
<String,Integer>();	1
=	3
=map.keySet();	1
=new	3
Configuration	1
Configuration();	1
Exception	1
FileInputFormat.addInputPath(job,new	1
FileOutputFormat.setOutputPath(job,new	1
HashMap	1
IOException,InterruptedException{	2
IntWritable	3
IntWritable();	2
IntWritable(1);	1
Iterator	1
Job	1
Job(conf,"WordCount");	1
Map	1
Mapper<Object,Text,Text,IntWritable>{	1
Path(args[0]));	1
Path(args[1]));	1
Path(args[1]));//setOutputPath(job,new	1
Reducer<Text,IntWritable,Text,IntWritable>{	1
Set	1
String	3
StringTokenizer	1
StringTokenizer(line);	1
System.exit(job.waitForCompletion(true)?0:1);	1
Text	1
Text();	1
WordMap	1
WordReduce	1
class	3
conf	1
context)	1
context)throws	1
context.write(key,result);	1
context.write(word,	1
else{	1
extends	2
final	1
for(IntWritable	1
if(map.get(str)!=null){	1
import	17
int	1
iter	1
itr	1
java.io.IOException;	1
java.util.HashMap;	1
java.util.Iterator;	1
java.util.Map;	1
java.util.Set;	1
java.util.StringTokenizer;	1
job	1
job.setJarByClass(WordMap.class);	1
job.setMapperClass(WordMap.class);	1
job.setOutputKeyClass(Text.class);	1
job.setOutputValueClass(IntWritable.class);	1
job.setReducerClass(WordReduce.class);	1
key,Iterable<IntWritable>values,Context	1
key,Text	1
keys=(String)iter.next();	1
line=value.toString();	1
main(String[]args)throws	1
map(Object	1
map.get(str)+1);	1
map.put(str,	2
map=new	1
new	2
one=new	1
org.apache.hadoop.conf.Configuration;	1
org.apache.hadoop.fs.Path;	1
org.apache.hadoop.io.IntWritable;	1
org.apache.hadoop.io.Text;	1
org.apache.hadoop.mapreduce.Job;	1
org.apache.hadoop.mapreduce.Mapper;	1
org.apache.hadoop.mapreduce.Reducer;	1
org.apache.hadoop.mapreduce.lib.input.FileInputFormat;	1
org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;	1
org.apache.log4j.Logger;	1
org.apache.log4j.PropertyConfigurator;	1
private	3
public	6
reduce(Text	1
result	1
result);	1
result.set(map.get(keys));	1
result.set(sum);	1
result=new	1
set	1
set.iterator();	1
static	4
str=itr.nextToken();	1
sum+=val.get();	1
sum=0;	1
throws	1
val:values)	1
value,Context	1
void	3
while	1
while(iter.hasNext()){	1
word	1
word.set(keys);	1
wordCount{	1
{	2
}	11
